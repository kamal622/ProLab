<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckCityName" xml:space="preserve">
    <value>SELECT CityName FROM City WHERE CityName=@CityName AND Id!=@Id</value>
  </data>
  <data name="CheckCountryName" xml:space="preserve">
    <value>SELECT CountryName FROM Country WHERE CountryName=@CountryName AND Id!=@Id</value>
  </data>
  <data name="CheckStateName" xml:space="preserve">
    <value>SELECT StateName FROM State WHERE StateName=@StateName AND Id!=@Id</value>
  </data>
  <data name="DeleteCity" xml:space="preserve">
    <value>DELETE FROM City WHERE Id=@Id</value>
  </data>
  <data name="DeleteCountry" xml:space="preserve">
    <value>DELETE FROM Country WHERE Id=@Id</value>
  </data>
  <data name="DeleteState" xml:space="preserve">
    <value>DELETE FROM State WHERE Id=@Id</value>
  </data>
  <data name="GetAllCity" xml:space="preserve">
    <value>SELECT Id,CityName FROM City</value>
  </data>
  <data name="GETALLCOUNTRY" xml:space="preserve">
    <value>SELECT * FROM  Country ORDER BY CountryName</value>
  </data>
  <data name="GetCityById" xml:space="preserve">
    <value>SELECT * FROM City WHERE Id=@Id </value>
  </data>
  <data name="GetCityByStateId" xml:space="preserve">
    <value>SELECT * FROM City WHERE CountryId=@CountryId AND StateId=@StateId  ORDER BY CityName</value>
  </data>
  <data name="GetCountryById" xml:space="preserve">
    <value>SELECT * FROM  Country WHERE Id=@Id</value>
  </data>
  <data name="GetStateByCountryId" xml:space="preserve">
    <value>SELECT * FROM State WHERE CountryId=@CountryId ORDER BY StateName</value>
  </data>
  <data name="GetStateById" xml:space="preserve">
    <value>SELECT * FROM State WHERE Id=@Id</value>
  </data>
  <data name="GetUserByName" xml:space="preserve">
    <value>SELECT * FROM Users WHERE UserName = @UserName</value>
  </data>
  <data name="SaveCity" xml:space="preserve">
    <value>INSERT INTO City(CountryId,StateId,CityName,IsActive,CreateDate,CreateBy) VALUES(@CountryId,@StateId,@CityName,@IsActive,@CreateDate,@CreateBy)</value>
  </data>
  <data name="SaveCountry" xml:space="preserve">
    <value>INSERT INTO Country(CountryName,IsActive,CreateDate,CreateBy) VALUES(@CountryName,@IsActive,@CreateDate,@CreateBy) </value>
  </data>
  <data name="SaveState" xml:space="preserve">
    <value>INSERT INTO State(CountryId,StateName,IsActive,CreateDate,CreateBy) VALUES(@CountryId,@StateName,@IsActive,@CreateDate,@CreateBy) </value>
  </data>
  <data name="UpdateCity" xml:space="preserve">
    <value>UPDATE City SET CountryId=@CountryId,StateId=@StateId,CityName=@CityName,IsActive=@IsActive, UpdateDate=@UpdateDate, UpdateBy=@UpdateBy WHERE Id=@Id</value>
  </data>
  <data name="UpdateCountry" xml:space="preserve">
    <value>UPDATE Country SET CountryName=@CountryName,IsActive=@IsActive , UpdateDate=@UpdateDate, UpdateBy=@UpdateBy Where Id=@Id</value>
  </data>
  <data name="UpdateState" xml:space="preserve">
    <value>UPDATE State SET CountryId=@CountryId,StateName=@StateName,IsActive=@IsActive , UpdateDate=@UpdateDate, UpdateBy=@UpdateBy WHERE Id=@Id</value>
  </data>
  <data name="GetCityByName" xml:space="preserve">
    <value>SELECT * FROM City WHERE CityName=@CityName</value>
  </data>
  <data name="GetCountryByName" xml:space="preserve">
    <value>SELECT * FROM Country WHERE CountryName=@CountryName</value>
  </data>
  <data name="GetStateByName" xml:space="preserve">
    <value>SELECT * FROM State WHERE StateName=@StateName</value>
  </data>
  <data name="GetDefaultCity" xml:space="preserve">
    <value>select a.Id from City a,Settings b where a.CityName=b.Value</value>
  </data>
  <data name="GetDefaultCountry" xml:space="preserve">
    <value>select a.Id from Country a,Settings b where a.CountryName=b.Value</value>
  </data>
  <data name="GetDefaultState" xml:space="preserve">
    <value>select a.Id from State a,Settings b where a.StateName=b.Value</value>
  </data>
  <data name="GetAllReportStatus" xml:space="preserve">
    <value>SELECT * FROM  ReportStatus</value>
  </data>
</root>